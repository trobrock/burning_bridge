// Generated by CoffeeScript 1.6.2
(function() {
  var Campfire, Client, Command, Rooms, User, campfire, campfire_subdomain, campfire_token, carrier, configuration, fs, handler, net, rooms, server;

  net = require("net");

  carrier = require("carrier");

  fs = require("fs");

  Campfire = require("campfire").Campfire;

  User = require("./user.js").User;

  Command = require("./command.js").Command;

  Rooms = require("./rooms.js").Rooms;

  configuration = JSON.parse(fs.readFileSync("./config/config.json").toString());

  campfire_subdomain = configuration.subdomain;

  campfire_token = configuration.token;

  campfire = new Campfire({
    ssl: true,
    token: campfire_token,
    account: campfire_subdomain
  });

  String.prototype.snakeCase = function() {
    return this.split(" ").map(function(word) {
      return word.toLowerCase();
    }).join("_");
  };

  Client = (function() {
    function Client(socket) {
      this.socket = socket;
    }

    Client.prototype.send = function(message) {
      console.log("[s] :" + message);
      return this.socket.write(":" + message + "\r\n");
    };

    return Client;

  })();

  rooms = new Rooms();

  handler = function(socket) {
    var client, current_user;

    client = new Client(socket);
    current_user = null;
    socket.name = socket.remoteAddress + ":" + socket.remotePort;
    carrier.carry(socket, function(line) {
      var api_token, channel, command, message, r, room, subdomain, target, user, users, _i, _j, _len, _len1, _ref, _ref1, _ref2;

      command = Command.parse(line);
      console.log("[r] " + command.command + " with args " + command.args);
      switch (command.command) {
        case "PASS":
          _ref = command.args[0].split(":"), subdomain = _ref[0], api_token = _ref[1];
          return current_user = new User(subdomain, api_token, client);
        case "NICK":
          if (!current_user.nick()) {
            return current_user.nick(command.args[0]);
          }
          break;
        case "USER":
          current_user.username = command.args[0];
          current_user.hostname = command.args[1];
          client.send("localhost 001 " + (current_user.nick()) + " Welcome " + (current_user.mask()));
          client.send("localhost 002 " + (current_user.nick()) + " Your host");
          client.send("localhost 003 " + (current_user.nick()) + " This server was created");
          client.send("localhost 004 " + (current_user.nick()) + " myIrcServer 0.0.1");
          client.send("localhost 375 " + (current_user.nick()) + " :- Message of the Day -");
          client.send("localhost 372 " + (current_user.nick()) + " myIrcServer 0.0.1");
          return client.send("localhost 376 " + (current_user.nick()) + " :End of /MOTD command.");
        case "PING":
          return client.send("localhost PONG localhost :localhost");
        case "MODE":
          target = command.args[0];
          if (target.match(/^\#/)) {
            if (command.args[1]) {
              return client.send("" + (current_user.mask()) + " MODE " + target + " " + command.args[1] + " " + (current_user.nick()));
            }
          }
          break;
        case "LIST":
          client.send("localhost 321 " + (current_user.nick()) + " Channel :Users  Name");
          _ref1 = rooms.rooms;
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            room = _ref1[_i];
            client.send("localhost 322 " + (current_user.nick()) + " " + (room.name.snakeCase()) + " " + room.users.length + " :[]");
          }
          return client.send("localhost 323 " + (current_user.nick()) + " :End of /LIST");
        case "JOIN":
          channel = command.args[0];
          room = null;
          _ref2 = rooms.rooms;
          for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
            r = _ref2[_j];
            if (r.name.snakeCase() === channel.replace("#", "")) {
              room = r;
            }
          }
          users = (function() {
            var _k, _len2, _ref3, _results;

            _ref3 = room.users;
            _results = [];
            for (_k = 0, _len2 = _ref3.length; _k < _len2; _k++) {
              user = _ref3[_k];
              _results.push(user.name.snakeCase());
            }
            return _results;
          })();
          return room.join(function() {
            var _this = this;

            client.send("" + (current_user.mask()) + " JOIN " + channel);
            client.send("localhost 331 " + (current_user.nick()) + " " + channel + " :No topic is set");
            client.send("localhost 353 " + (current_user.nick()) + " = " + channel + " :" + (users.join(" ")));
            client.send("localhost 366 " + (current_user.nick()) + " " + channel + " :End of /NAMES list.");
            return room.listen(function(message) {
              if (message.type !== "TextMessage") {
                return;
              }
              if (message.userId === current_user.id) {
                return;
              }
              user = new User(campfire_subdomain, campfire_token, client, message.userId);
              return user.once("fetched", function() {
                var name;

                name = user.real_name.snakeCase();
                return client.send("" + (user.mask()) + " PRIVMSG " + channel + " :" + message.body);
              });
            });
          });
        case "PRIVMSG":
          channel = command.args[0];
          message = command.args.slice(1).join(" ").substr(1);
          return current_user.speak_in_room(channel, message);
        case "PART":
          channel = command.args[0];
          message = command.args[1].substr(1);
          return current_user.leave_room(channel, message);
      }
    });
    socket.on("end", function() {
      return console.log("Client disconnected");
    });
    return socket.on("error", function(e) {
      return console.log("Caught fatal error:", e);
    });
  };

  server = net.createServer(handler).listen(6666, function() {
    return console.log("Started listening on 6666");
  });

}).call(this);
