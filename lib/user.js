// Generated by CoffeeScript 1.6.3
(function() {
  var Campfire, EventEmitter, User;

  Campfire = require("campfire").Campfire;

  EventEmitter = require("events").EventEmitter;

  User = (function() {
    User.prototype.id = -1;

    User.prototype.real_name = null;

    User.prototype.username = null;

    User.prototype.hostname = null;

    function User(subdomain, api_token, irc_client, id) {
      this.irc_client = irc_client;
      this.id = id != null ? id : -1;
      this.events = new EventEmitter();
      this.campfire = new Campfire({
        ssl: true,
        token: api_token,
        account: subdomain
      });
      this._fetch();
    }

    User.prototype.mask = function() {
      return "" + (this.nick()) + "!" + this.username + "@" + this.campfire.domain;
    };

    User.prototype.speak_in_room = function(channel, message) {
      var _this = this;
      return this.find_room(channel, function(room) {
        return room.speak(_this._clean_message(room, message));
      });
    };

    User.prototype.leave_room = function(channel, message) {
      var _this = this;
      return this.find_room(channel, function(room) {
        return room.leave(function() {
          return _this.irc_client.send("" + (_this.mask()) + " PART " + channel + " :" + message);
        });
      });
    };

    User.prototype.find_room = function(channel, callback) {
      var _this = this;
      return this.campfire.presence(function(err, rooms) {
        var room, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = rooms.length; _i < _len; _i++) {
          room = rooms[_i];
          if (room.name.snakeCase() === channel.replace("#", "")) {
            _results.push(_this.campfire.room(room.id, function(err, r) {
              return callback(r);
            }));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      });
    };

    User.prototype.on = function() {
      return this.events.on.apply(this.events, arguments);
    };

    User.prototype.once = function() {
      return this.events.once.apply(this.events, arguments);
    };

    User.prototype.nick = function(new_nick) {
      if (new_nick == null) {
        return this._nick;
      }
      if (this._nick) {
        this.irc_client.send("" + (this.mask()) + " NICK :" + new_nick);
      }
      return this._nick = new_nick;
    };

    User.prototype._clean_message = function(room, message, callback) {
      var tokens;
      tokens = message.split(" ").map(function(token) {
        var name, possible_name, user, _i, _len, _ref;
        possible_name = token.match(/(^| )([a-z]+_[a-z]+)([^ ]*)/);
        if (possible_name) {
          name = possible_name[0].replace(/^ /, "");
          _ref = room.users;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            user = _ref[_i];
            if (user.name.snakeCase() === possible_name[2]) {
              name = "" + user.name + possible_name[3];
            }
          }
          return name;
        } else {
          return token;
        }
      });
      return tokens.join(" ");
    };

    User.prototype._fetch = function() {
      var _this = this;
      return this._fetchFunction()(function(err, data) {
        var user;
        user = data.user;
        console.log(user);
        _this.nick(user.name.snakeCase());
        _this.username = _this.nick();
        _this.real_name = user.name;
        _this.id = user.id;
        return _this.events.emit("fetched");
      });
    };

    User.prototype._fetchFunction = function() {
      if (this.id > -1) {
        return this.campfire.user.bind(this.campfire, this.id);
      } else {
        return this.campfire.me.bind(this.campfire);
      }
    };

    return User;

  })();

  exports.User = User;

}).call(this);
